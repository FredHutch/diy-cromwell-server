###### FH Slurm Backend, with call caching, without docker/singularity and a mariaDB via DB4Sci
database {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    driver = "com.mysql.cj.jdbc.Driver"
    connectionTimeout = 5000
  }
}
system.io {
  number-of-requests = 1000000
  per = 1 seconds
  number-of-attempts = 5
}

workflow-options {
    # save all workflow logs to refer back to
    workflow-log-temporary = false
}

akka.http.server.request-timeout = 30s

call-caching {
  # Allows re-use of existing results for jobs you've already run
  # (default: false)
  enabled = true

  # Whether to invalidate a cache result forever if we cannot reuse them. Disable this if you expect some cache copies
  # to fail for external reasons which should not invalidate the cache (e.g. auth differences between users):
  # (default: true)
  invalidate-bad-cache-results = true
}
### Backend and filesystem
backend {
  default = gizmo
  providers {
    gizmo {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        runtime-attributes = """
        Int cpu = 1
        String walltime = "18:00:00"
        Int memory = 2000
        String partition = "campus"
        String? docker
        """

        submit = """
            source /app/Lmod/lmod/lmod/init/bash
            module use /app/easybuild/modules/all
            module purge
            
            sbatch \
              --wait \
              --partition=${partition} \
              -J ${job_name} \
              -D ${cwd} \
              -o ${out} \
              -e ${err} \
              --cpus-per-task=${cpu} \
              --mem=${memory} \
              --time=${walltime} \
              --wrap "/bin/bash ${script}"
        """
       filesystems {
          local {
            localization: [
              ## for local SLURM, hardlink doesn't work. Options for this and caching: , "soft-link" , "hard-link", "copy"
              "soft-link", "copy"
            ]
            ## call caching config relating to the filesystem side
            caching {
              # When copying a cached result, what type of file duplication should occur. Attempted in the order listed below:
              duplication-strategy: [
                "soft-link"
              ]
              hashing-strategy: "path"
              # Possible values: file, path
              # "file" will compute an md5 hash of the file content and take some time. 
              # "path" will compute an md5 hash of the file path. This strategy will only be effective if the duplication-strategy (above) is set to "soft-link",
              # in order to allow for the original file path to be hashed.

              check-sibling-md5: false
              # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
              # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
            }
          }
        }
        kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "Submitted batch job (\\d+).*"
      }
    }
  }
}
